import random
import time
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
import string
import os

RUSSIAN_ALPHABET = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"

def generate_string(length):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    return ''.join(random.choice(RUSSIAN_ALPHABET) for _ in range(length))

def analyze_distribution(input_str):
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ"""
    total = len(input_str)
    freq = Counter(input_str)
    
    print("\n–ß–∞—Å—Ç–æ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤:")
    print("–°–∏–º–≤–æ–ª\t–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\t–ü—Ä–æ—Ü–µ–Ω—Ç\t–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞")
    
    max_freq = max(freq.values()) if freq else 1
    
    for char, count in sorted(freq.items()):
        percentage = (count / total) * 100
        bar_length = int((count / max_freq) * 50)
        print(f"{char}\t{count}\t\t{percentage:.2f}%\t{'*' * bar_length}")

def measure_crack_time(password, iterations=5):
    """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è"""
    total_time = 0
    alphabet_size = len(RUSSIAN_ALPHABET)
    
    for _ in range(iterations):
        start_time = time.time()
        attempts = 0
        found = False
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        max_attempts = min(100000, alphabet_size ** len(password) // 100)
        
        while attempts < max_attempts and not found:
            attempt = ''.join(random.choice(RUSSIAN_ALPHABET) for _ in range(len(password)))
            attempts += 1
            
            if attempt == password:
                found = True
        
        end_time = time.time()
        total_time += (end_time - start_time)
    
    return total_time / iterations

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 1e-6:
        return f"{seconds * 1e9:.2f} –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥"
    elif seconds < 1e-3:
        return f"{seconds * 1e6:.2f} –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥"
    elif seconds < 1:
        return f"{seconds * 1000:.2f} –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥"
    elif seconds < 60:
        return f"{seconds:.2f} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        minutes = seconds / 60
        return f"{minutes:.2f} –º–∏–Ω—É—Ç"
    elif seconds < 86400:
        hours = seconds / 3600
        return f"{hours:.2f} —á–∞—Å–æ–≤"
    elif seconds < 31536000:
        days = seconds / 86400
        return f"{days:.2f} –¥–Ω–µ–π"
    else:
        years = seconds / 31536000
        return f"{years:.2f} –ª–µ—Ç"

def calculate_theoretical_time(password_length, attempts_per_second=1000000):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–±–æ—Ä–∞"""
    alphabet_size = len(RUSSIAN_ALPHABET)
    total_combinations = alphabet_size ** password_length
    average_time = total_combinations / (2 * attempts_per_second)  # –í —Å—Ä–µ–¥–Ω–µ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É
    
    return average_time, total_combinations

def generate_time_graph(max_length, filename=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–±–æ—Ä–∞ –æ—Ç –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è"""
    lengths = list(range(1, max_length + 1))
    times = []
    theoretical_times = []
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞...")
    print("–î–ª–∏–Ω–∞\t–≠–∫—Å–ø. –≤—Ä–µ–º—è\t–¢–µ–æ—Ä. –≤—Ä–µ–º—è\t–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏")
    print("-" * 60)
    
    for length in lengths:
        password = generate_string(length)
        avg_time = measure_crack_time(password, iterations=3)
        times.append(avg_time)
        
        theoretical_time, combinations = calculate_theoretical_time(length)
        theoretical_times.append(theoretical_time)
        
        print(f"{length}\t{format_time(avg_time)}\t{format_time(theoretical_time)}\t{combinations:,}")
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(12, 8))
    
    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    plt.plot(lengths, times, 'bo-', linewidth=2, markersize=8, label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    plt.plot(lengths, theoretical_times, 'r--', linewidth=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (1 –º–ª–Ω/—Å–µ–∫)')
    
    plt.xlabel('–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è', fontsize=12)
    plt.ylabel('–í—Ä–µ–º—è –ø–æ–¥–±–æ—Ä–∞', fontsize=12)
    plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –µ–≥–æ –¥–ª–∏–Ω—ã\n(–†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç, 66 —Å–∏–º–≤–æ–ª–æ–≤)', fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend()
    plt.yscale('log')  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    if not filename:
        filename = f"password_time_graph_{int(time.time())}.png"
    
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"\n–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    data_filename = "password_time_data.txt"
    with open(data_filename, 'w', encoding='utf-8') as f:
        f.write("–î–ª–∏–Ω–∞\t–≠–∫—Å–ø_–≤—Ä–µ–º—è_—Å–µ–∫\t–¢–µ–æ—Ä_–≤—Ä–µ–º—è_—Å–µ–∫\t–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏\n")
        for length, exp_time, theor_time in zip(lengths, times, theoretical_times):
            f.write(f"{length}\t{exp_time}\t{theor_time}\t{len(RUSSIAN_ALPHABET) ** length}\n")
    
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {data_filename}")

def print_recommendations():
    """–í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—ã–±–æ—Ä—É –ø–∞—Ä–æ–ª—è"""
    print("\n" + "="*70)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–ë–û–†–£ –ü–ê–†–û–õ–Ø")
    print("="*70)
    print("1. üí° –î–õ–ò–ù–ê –ü–ê–†–û–õ–Ø:")
    print("   - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: 8+ —Å–∏–º–≤–æ–ª–æ–≤")
    print("   - –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: 10+ —Å–∏–º–≤–æ–ª–æ–≤") 
    print("   - –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã: 12+ —Å–∏–º–≤–æ–ª–æ–≤")
    print("   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 14+ —Å–∏–º–≤–æ–ª–æ–≤")
    print()
    print("2. üîí –°–õ–û–ñ–ù–û–°–¢–¨ –ü–ê–†–û–õ–Ø:")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞")
    print("   - –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç)")
    print("   - –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print()
    print("3. ‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ê–¢–ê–ö–£–Æ–©–ï–ì–û:")
    print("   - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä: 10^6 - 10^8 –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
    print("   - GPU –∫–ª–∞—Å—Ç–µ—Ä: –¥–æ 10^12 –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
    print("   - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–æ—Å—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º")
    print()
    print("4. üõ°Ô∏è  –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–†–´:")
    print("   - –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)")
    print("   - –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π (–∫–∞–∂–¥—ã–µ 3-6 –º–µ—Å—è—Ü–µ–≤)")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π")
    print("   - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    print()
    print("5. üìä –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –í–ó–õ–û–ú–ê –î–õ–Ø –†–£–°–°–ö–û–ì–û –ê–õ–§–ê–í–ò–¢–ê (66 —Å–∏–º–≤–æ–ª–æ–≤):")
    
    attempts_per_second = 1000000  # 1 –º–ª–Ω –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É
    for length in [6, 8, 10, 12, 14]:
        theor_time, combinations = calculate_theoretical_time(length, attempts_per_second)
        print(f"   - {length} —Å–∏–º–≤–æ–ª–æ–≤: {format_time(theor_time)} ({combinations:,} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)")

def quick_demo():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞"""
    print("\nüöÄ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –ü–û–î–ë–û–†–ê")
    print("="*50)
    print("–î–ª–∏–Ω–∞\t–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏\t\t–í—Ä–µ–º—è –≤–∑–ª–æ–º–∞ (1 –º–ª–Ω/—Å–µ–∫)")
    print("-"*50)
    
    attempts_per_second = 1000000
    for length in range(4, 13, 2):
        theor_time, combinations = calculate_theoretical_time(length, attempts_per_second)
        print(f"{length}\t{combinations:>15,}\t{format_time(theor_time)}")

def main():
    random.seed(time.time())
    print("üîê –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞")
    print(f"üìä –†–∞–∑–º–µ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞: {len(RUSSIAN_ALPHABET)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤")
        print("2. ‚è±Ô∏è  –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è")
        print("3. üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–±–æ—Ä–∞ –æ—Ç –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è")
        print("4. üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–∞—Ä–æ–ª—è")
        print("5. üöÄ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        
        try:
            choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            continue
        
        if choice == 1:
            try:
                length = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏: "))
                if length <= 0:
                    print("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    continue
                if length > 1000:
                    print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª–∏–Ω–∞. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
                    continue
                
                random_str = generate_string(length)
                print(f"\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {random_str}")
                analyze_distribution(random_str)
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        
        elif choice == 2:
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
            if not password:
                print("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                continue
            if not all(c in RUSSIAN_ALPHABET for c in password):
                print("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã.")
                continue
            if len(password) > 6:
                print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–¥–±–æ—Ä –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
            
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è: {password}")
            print(f"üìè –î–ª–∏–Ω–∞: {len(password)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            avg_time = measure_crack_time(password)
            print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–±–æ—Ä–∞: {format_time(avg_time)}")
            
            # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
            theor_time, combinations = calculate_theoretical_time(len(password))
            print(f"üìä –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (1 –º–ª–Ω/—Å–µ–∫): {format_time(theor_time)}")
            print(f"üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {combinations:,}")
        
        elif choice == 3:
            try:
                max_length = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (2-5): "))
                if max_length < 2 or max_length > 6:
                    print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –æ—Ç 2 –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤.")
                    continue
                
                filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ–∏–º–µ–Ω–∏): ").strip()
                filename = filename if filename else None
                generate_time_graph(max_length, filename)
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        
        elif choice == 4:
            print_recommendations()
        
        elif choice == 5:
            quick_demo()
        
        elif choice == 0:
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

if __name__ == "__main__":
    try:
        plt.figure()
        plt.close()
    except:
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª—ã.")
    
    main()